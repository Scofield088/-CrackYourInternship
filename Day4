#Reverse Pairs
class Solution {
    public int reversePairs(int[] nums) {
        int n=nums.length;
        return MS(nums,0,n-1);
    }
    public int MS(int nums[],int low,int high){
        int cnt=0;
        if(low>=high) return cnt;
        int mid=low+(high-low)/2;
        cnt+=MS(nums,low,mid);
        cnt+=MS(nums,mid+1,high);
        cnt+=countPairs(nums,low,mid,high);
        Merge(nums,low,mid,high);
        return cnt;
    }
    public int countPairs(int nums[],int low,int mid,int high){
        int cnt=0;
        int right=mid+1;
        for(int i=low;i<=mid;i++){
            while(right<=high && nums[i]>2L*nums[right]){
                right++;
            }
            cnt+=(right-(mid+1));
        }
        return cnt;
    }
    public void Merge(int nums[],int low,int mid,int high){
        int R=high-low+1;
        int k=0;
        int i=low;
        int j=mid+1;
        int temp[]=new int[R];
        while(i<=mid && j<=high){
            if(nums[i]<=nums[j]){
                temp[k++]=nums[i++];
            }
            else{
                temp[k++]=nums[j++];
            }
        }
        while(i<=mid){
            temp[k++]=nums[i++];
        }
        while(j<=high){
            temp[k++]=nums[j++];
        }
        for(int p=0;p<R;p++){
            nums[p+low]=temp[p];
        }
    }
}






#Middle of Linked List
class Solution {
    public ListNode middleNode(ListNode head) {
        ListNode fast=head;
        ListNode slow=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }
}




#Linked List Cycle
public class Solution {
    public boolean hasCycle(ListNode head) {
        ListNode slow=head;
        ListNode fast=head;
        while(fast!=null && fast.next!=null){
            slow=slow.next;
            fast=fast.next.next;
            if(slow==fast){
                return true;
            }
        }
        return false;
    }
}





# Remove Duplicates from Sorted List
class Solution {
    public ListNode deleteDuplicates(ListNode head) {
        ListNode temp=head;
        while(temp!=null && temp.next!=null){
            if(temp.val==temp.next.val){
                temp.next=temp.next.next;
            }
            else{ 
                temp=temp.next;
            }
        }
        return head;
    }
}




#Smallest Positive Missing Number
class Solution {
    public int missingNumber(int[] arr) {
        int n=arr.length;
        Arrays.sort(arr);
        int j=-1;
        for(int i=0;i<n;i++){
            if(arr[i]==1){
                j=i;
                break;
            }
        }
        if(j==-1){
            return 1;
        }
        int ans=1;
        for(int i=j;i<n;i++){
            if(arr[i]==ans){
                ans++;
            }
            else if(arr[i]>ans){
                return ans;
            }
        }
        return ans;
    }
}
